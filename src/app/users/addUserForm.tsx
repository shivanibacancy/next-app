// AddUserForm.tsx
"use client";
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input"; 
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog"; 
import { User } from "./columns";
import { z } from "zod";

const userSchema = z.object({
    name: z.string().min(2, "Name is required").regex(/^[a-zA-Z\s]+$/, "Name must contain only alphabets"),
    email: z.string().email("Invalid email address"),
});

interface AddUserFormProps {
  onClose: () => void;
  onSubmit: (user: User) => void;
}

const AddUserForm: React.FC<AddUserFormProps> = ({ onClose, onSubmit }) => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [errors, setErrors] = useState<{ name?: string; email?: string }>({});

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    //const result = userSchema.parse({ name, email });

    try {
      const result = userSchema.parse({ name, email });
  
      const newUser: User = {
        id: "", // ID will be generated by the backend
        name,
        email,
        image: "", // You can set a default image or add an image field
        lastseen: new Date().toISOString(), // Example value for lastseen
      };
  
      onSubmit(newUser);
      onClose(); // Close the modal after submission
    } catch (error) {
      // Extract errors from the Zod error object and set them to state
      const formErrors: { name?: string; email?: string } = {};
      error.errors.forEach((error) => {
        if (error.path.includes("name")) formErrors.name = error.message;
        if (error.path.includes("email")) formErrors.email = error.message;
      });
      setErrors(formErrors);
    }

    // if (!result.success) {
    //   // Extract errors from the Zod result and set them to state
    //   const formErrors: { name?: string; email?: string } = {};
    //   result.error.errors.forEach((error) => {
    //     if (error.path.includes("name")) formErrors.name = error.message;
    //     if (error.path.includes("email")) formErrors.email = error.message;
    //   });
    //   setErrors(formErrors);
    //   return;
    // }

    // const newUser: User = {
    //   id: "", // ID will be generated by the backend
    //   name,
    //   email,
    //   image: "", // You can set a default image or add an image field
    //   lastseen: new Date().toISOString(), // Example value for lastseen
    // };

    // onSubmit(newUser);
    // onClose(); // Close the modal after submission
  };

  return (
    <Dialog onOpenChange={onClose} open={true}>
      <DialogContent>
        <DialogTitle>Add New User</DialogTitle>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            placeholder="Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full"
            {...(errors.name && { error: errors.name })}
          />
          <Input
            placeholder="Email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full"
            {...(errors.email && { error: errors.email })}
          />
          <Button type="submit" className="w-full">
            Submit
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default AddUserForm;